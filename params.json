{
  "name": "Testing Distributed Systems",
  "tagline": "List of curated materials on testing distributed systems",
  "body": "Testing Distributed Systems\r\n==================================\r\n\r\n## Overview of  testing approaches\r\n\r\n### RICON 2014: Ines Sombra, Fastly - Testing in a Distributed World\r\nhttps://youtu.be/KSdNYi55kjg\r\n\r\nGreat overview of techniques for testing distributed systems.\r\nAdditional materials for this talk could be found in [this Github repo](https://github.com/Randommood/RICON2014)\r\n\r\n\r\n### Technologies for Testing Distributed Systems by Colin Skott\r\nColin Skott shares his viewpoint from academia on testing distributed systems.\r\n* [Technologies for Testing Distributed Systems, Part I](http://colin-scott.github.io/blog/2016/03/04/technologies-for-testing-and-debugging-distributed-systems/)\r\n* See also post [Distributed Systems Testing: The Lost World](http://tagide.com/blog/research/distributed-systems-testing-the-lost-world/) by Crista Lopes\r\n\r\n### Richard Cook\r\n* [Velocity NY 2013: Richard Cook, \"Resilience In Complex Adaptive Systems\"](https://www.youtube.com/watch?v=PGLYEDpNu60&feature=youtu.be)\r\n* [Velocity 2012: Richard Cook, \"How Complex Systems Fail\"](https://www.youtube.com/watch?v=2S0k12uZR14&feature=youtu.be)\r\n* [How Complex Systems Fail](http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf)\r\n\r\n###  Misc testing approaches\r\n* [\"Simulation Testing\" by Michael Nygard](http://www.youtube.com/watch?v=N5HyVUPuU0E&feature=youtu.be)\r\n\r\n### Aphyr's Jepsen\r\n* [Kyle Kingsbury on InfoQ](http://www.infoq.com/author/Kyle-Kingsbury)\r\n* [Jepsen: RethinkDB 2.1.5](https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5)\r\n* [Jepsen: RethinkDB 2.2.3 reconfiguration](https://aphyr.com/posts/330-jepsen-rethinkdb-2-2-3-reconfiguration)\r\n* [Aphyr's Jepsen posts](https://aphyr.com/tags/Jepsen)\r\n* [Jepsen Talks](https://github.com/aphyr/jepsen-talks)\r\n* [Call me maybe: Jepsen and flaky networks](http://www.slideshare.net/shalinmangar/call-me-maybe-jepsen-and-flaky-networks)\r\n* [Test scaffolding](https://github.com/aphyr/jepsen/blob/master/doc/scaffolding.md) -- start page if you want to write Jepsen test\r\n\r\n\r\n### Formal Methods\r\n* [Comparisons of Alloy and Spin](http://www2.research.att.com/~pamela/model.html)\r\n* [Verdi: Formally Verifying Distributed Systems](http://verdi.uwplse.org/)\r\n* [Network Semantics for Verifying Distributed Systems](https://homes.cs.washington.edu/~jrw12/network-semantics.html)\r\n* [The verification of a distributed system By Caitie McCaffrey](http://queue.acm.org/detail.cfm?id=2889274)\r\n\r\n\r\n### Fuzzing\r\n* [Fuzzing Raft for Fun and Publication](https://colin-scott.github.io/blog/2015/10/07/fuzzing-raft-for-fun-and-profit/)\r\n* [DNS parser, meet Go fuzzer](https://blog.cloudflare.com/dns-parser-meet-go-fuzzer/)\r\n* [Fuzz Testing with afl-fuzz (American Fuzzy Lop)](http://spin.atomicobject.com/2015/08/23/fuzz-testing-american-fuzzy-lop/)\r\n* [Randomized testing for Go](https://github.com/dvyukov/go-fuzz) and talk on this tool [GopherCon 2015: Dmitry Vyukov - Go Dynamic Tools](https://www.youtube.com/watch?v=a9xrxRsIbSU)\r\n* [Simple guided fuzzing for libraries using LLVM's new libFuzzer](http://blog.llvm.org/2015/04/fuzz-all-clangs.html)\r\n* [LibFuzzer – a library for coverage-guided fuzz testing](http://llvm.org/docs/LibFuzzer.html)\r\n* [How Heartbleed could've been found](https://blog.hboeck.de/archives/868-How-Heartbleed-couldve-been-found.html) -- example of how fuzzing could be used for finding famous HeartBleed vulnerability\r\n* [Combining AFL and QuickCheck for Directed Fuzzing by Dan Luu](http://danluu.com/testing/)\r\n\r\n\r\n### Kill-dash-nine\r\n* [Game Day Exercises at Stripe: Learning from `kill -9`](https://stripe.com/blog/game-day-exercises-at-stripe)\r\n* [Sometimes Kill -9 Isn’t Enough](http://bravenewgeek.com/sometimes-kill-9-isnt-enough/)\r\n* [Comcast tool](https://github.com/tylertreat/Comcast)\r\n* [Slow tool](https://github.com/ModusCreateOrg/slow/)\r\n* [Python API for Linux Traffic Control](https://github.com/praus/shapy)\r\n\r\n### Performance and Benchmarking\r\n* [Your Load Generator Is Probably Lying To You](http://highscalability.com/blog/2015/10/5/your-load-generator-is-probably-lying-to-you-take-the-red-pi.html)\r\n* [Everything You Know About Latency Is Wrong](http://bravenewgeek.com/everything-you-know-about-latency-is-wrong/) -- great overview of Gil Tene`s \"How NOT to Measure Latency\" talk\r\n* [\"How NOT to Measure Latency\" by Gil Tene](https://www.youtube.com/watch?v=lJ8ydIuPFeU)\r\n* [\"Benchmarking: You're Doing It Wrong\" by Aysylu Greenberg](https://www.youtube.com/watch?v=XmImGiVuJno)\r\n\r\n### etc\r\n* [Simple Testing Can Prevent Most Critical Failures: An Analysis of Production Failures in Distributed Data-Intensive Systems](https://www.usenix.org/conference/osdi14/technical-sessions/presentation/yuan)\r\n\r\n\r\n## Concrete approaches in different distributed systems\r\n### Amazon DynamoDB\r\n* [The Evolution of Testing Methodology at AWS: From Status Quo to Formal Methods with TLA+](http://www.infoq.com/presentations/aws-testing-tla)\r\n* [Use of Formal Methods at Amazon Web Services](http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf)\r\n* [CACM Article \"How Amazon Web Services Uses Formal Methods\"](http://cacm.acm.org/magazines/2015/4/184701-how-amazon-web-services-uses-formal-methods/fulltext)\r\n* [Experience of software engineers using TLA+, PlusCal and TLC](http://tla2012.loria.fr/contributed/newcombe-slides.pdf)\r\n* [Debugging Designs by Chris Newcombie](http://www.hpts.ws/papers/2011/sessions_2011/Debugging.pdf) there is also a  [source bundle](http://www.hpts.ws/papers/2011/sessions_2011/amazonbundle.tar.gz)\r\n\r\n### Netflix \r\n* [Automated Failure Testing](http://techblog.netflix.com/2016/01/automated-failure-testing.html)\r\n* [Netflix Simian Army](http://techblog.netflix.com/2011/07/netflix-simian-army.html)\r\n* [Failure Injection Testing](http://techblog.netflix.com/2014/10/fit-failure-injection-testing.html)\r\n* [From Chaos to Control - Testing the resiliency of Netflix’s Content Discovery Platform](http://techblog.netflix.com/2015/08/from-chaos-to-control-testing.html)\r\n* [Breaking Bad at Netflix: Building Failure as a Service](http://www.infoq.com/presentations/failure-as-a-service-netflix)\r\n* [GTAC 2014: I Don't Test Often ... But When I Do, I Test in Production](https://www.youtube.com/watch?v=xkP70Zhhix4) -- Netflix different testing strategies\r\n* [Principles of Chaos Engineering](http://www.principlesofchaos.org/)\r\n\r\n### Twitter \r\n* [Diffy: Testing services without writing tests](https://blog.twitter.com/2015/diffy-testing-services-without-writing-tests)\r\n* [How we break things at Twitter: failure testing](https://blog.twitter.com/2015/how-we-break-things-at-twitter-failure-testing)\r\n\r\n### Datastax (Cassandra) \r\n* [Testing Apache Cassandra with Jepsen](http://www.datastax.com/dev/blog/testing-apache-cassandra-with-jepsen)\r\n* [Testing Cassandra Guarantees under Diverse Failure Modes with Jepsen](http://www.slideshare.net/jkni/testing-cassandra-guarantees-under-diverse-failure-modes-with-jepsen-53168992)\r\n* [Testing Cassandra Guarantees under Diverse Failure Modes with Jepsen](http://cassandrasummit-datastax.com/agenda/testing-cassandra-guarantees-under-diverse-failure-modes-with-jepsen/)\r\n* [Jepsen Cassandra Testing on Git](https://github.com/riptano/jepsen)\r\n* [Netflix A STATE OF XEN - CHAOS MONKEY & CASSANDRA](https://vimeopro.com/user35188327/cassandra-summit-2015/video/140949186) from Cassandra Summit 2015\r\n\r\n### ScyllaDB\r\nThey published series of blog posts on testing ScyllaDB:\r\n* [Scylla testing part 1: Cassandra compatibility testing](http://www.scylladb.com/2016/02/04/cassandra-compatibility-testing/)\r\n* [Scylla testing part 2: Extending Jepsen for testing Scylla](http://www.scylladb.com/2016/02/11/jepsen-testing/)\r\n* [CharybdeFS: a new fault-injecting filesystem for software testing](http://www.scylladb.com/2016/02/16/fault-injection-filesystem-software-testing/)\r\n* [Testing part 4: Distributed tests](http://www.scylladb.com/2016/03/10/dtest-scylla/)\r\n* [Testing part 5: Longevity testing](http://www.scylladb.com/2016/03/15/longevity-testing-scylla/)\r\n\r\n### VoltDB \r\n* [How We Test at VoltDB](https://voltdb.com/blog/how-we-test-voltdb)\r\n* [\"All In With Determinism for Performance and Testing in Distributed Systems\" by John Hugg](https://www.youtube.com/watch?v=gJRj3vJL4wE) and a slide deck [Hugg-DeterministicDistributedSystems.pdf](https://github.com/strangeloop/StrangeLoop2015/blob/master/slides/talks/Hugg-DeterministicDistributedSystems.pdf)\r\n* [SelfCheck workload](https://github.com/VoltDB/voltdb/tree/master/tests/test_apps/txnid-selfcheck2)\r\n* [TPC-C implementation](https://github.com/VoltDB/voltdb/tree/master/tests/test_apps/tpcc)\r\n\r\n### MemSQL \r\n* [Running MemSQL’s 107 Node Test Infrastructure on CoreOS](http://blog.memsql.com/running-memsqls-107-node-test-infrastructure-on-coreos/)\r\n* [Practical Techniques to Achieve Quality in Large Software Projects](http://blog.memsql.com/practical-techniques-to-achieve-quality-in-large-software-projects-3/)\r\n* [How to Make a Believable Benchmark](http://blog.memsql.com/how-to-make-a-believable-benchmark/)\r\n* [Building an Infinitely Scalable Testing System](http://blog.memsql.com/building-an-infinitely-scalable-testing-system/) -- description of internal test system PsyDuck\r\n\r\n### FoundationDB \r\n* [\"Testing Distributed Systems w/ Deterministic Simulation\" by Will Wilson](https://www.youtube.com/watch?v=4fFDFbi3toc&feature=youtu.be)\r\n\r\n### Google ### \r\n* [Efficient Exploratory Testing of Concurrent Systems](http://www.pdl.cmu.edu/PDL-FTP/associated/CMU-PDL-11-113.pdf) -- They don`t mention it but looks like they describe testing of Google Omega\r\n* [Exploratory Testing Architecture (ETA) ](https://github.com/google/cluster-data/blob/master/ETAExplorationTraces.md)\r\n* [Paxos Made Live - An Engineering Perspective](http://research.google.com/pubs/pub33002.html)  has a section on testing\r\n\r\n### Microsoft \r\n* [Uncovering Bugs in Distributed Storage Systems during Testing (not in Production!) ](http://research.microsoft.com/pubs/260939/paper.pdf)\r\n* [Windows Azure Storage: A Highly Available Cloud Storage Service with Strong Consistency](http://www.sigops.org/sosp/sosp11/current/2011-Cascais/11-calder-online.pdf) describes \"Pressure Point Testing\" approach used for Azure Cloud Storage\r\n\r\n### Dropbox \r\n* [Mysteries of Dropbox Property-Based Testing of a Distributed Synchronization Service](http://www.cis.upenn.edu/~bcpierce/papers/mysteriesofdropbox.pdf) -- example of how to use QuickCheck to test synchronisation in Dropbox and similar tools (Google Drive)\r\n\r\n\r\n### Atomix Copycat \r\n* [A novel implementation of the Raft consensus algorithm](https://github.com/atomix/copycat)\r\n* [Jepsen tests for Atomix Copycat](https://github.com/atomix/atomix-jepsen)\r\n\r\n### LinkedIn \r\n* [Simoorg Failure inducer framework](https://github.com/linkedin/simoorg) -- Failure inducer implemented in Python\r\n\r\n### Druid.io \r\n* [Architecting Distributed Databases for Failure](http://www.infoq.com/presentations/data-integrity-distributed-systems)\r\n\r\n### Salesforce \r\n* [Go Fast and Don't Break Things: Ensuring Quality in the Cloud](http://www.hpts.ws/papers/2011/sessions_2011/HansmaHPTS2011.pdf)\r\n\r\n### TimSort \r\n* [Proving that Android’s, Java’s and Python’s sorting algorithm is broken (and showing how to fix it)](http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/)\r\n\r\n### SQLite \r\n* [Finding bugs in SQLite, the easy way](http://lcamtuf.blogspot.ru/2015/04/finding-bugs-in-sqlite-easy-way.html) -- how fuzzing used in testing SQLite database \r\n* [How SQLite Is Tested](https://www.sqlite.org/testing.html)\r\n\r\n### InfluxDB \r\n* [Jepsen and InfluxDB part 1](http://www.refactorium.com/distributed_systems/Hacking-up-a-testing-environment-for-jepsen-and-influxdb/)\r\n* [Jepsen and InfluxDB part 2](http://www.refactorium.com/distributed_systems/InfluxDB-and-Jepsen-Chapter-II-Where-is-influxdb-on-the-cap-scale/)\r\n\r\n## Tools\r\n* [Hermitage: Testing transaction isolation levels](https://github.com/ept/hermitage)\r\n* [RapidCheck - QuickCheck port to C++](https://github.com/emil-e/rapidcheck)\r\n* [Verdi - A framework for formally verifying distributed systems implementations in Coq](https://github.com/uwplse/verdi)\r\n* [Simulating shitty network connections so you can build better systems](https://github.com/tylertreat/comcast)\r\n* [Muxy Simulating real-world distributed system failures](https://github.com/mefellows/muxy)\r\n* [faketime](http://manpages.ubuntu.com/manpages/natty/man1/faketime.1.html)\r\n\r\n### QuickCheck \r\n* [PolyConf 14: Testing the Hard Stuff and Staying Sane / John Hughes](http://www.youtube.com/watch?v=F6LzB6SdFKA&feature=youtu.be)\r\n* [The Joy of Testing](http://www.infoq.com/presentations/The-Joy-of-Testing)\r\n* [John Hughes on InfoQ](http://www.infoq.com/author/John-Hughes)\r\n* [Hansei: Property-based Development of Concurrent Systems](https://speakerdeck.com/jtuple/hansei-property-based-development-of-concurrent-systems)\r\n* [QuickChecking Poolboy for Fun and Profit](http://basho.com/posts/technical/quickchecking-poolboy-for-fun-and-profit/) -- from Basho\r\n* [Combining Fault-Injection with Property-Based Testing](http://www2.hh.se/staff/magnusj/papers/2014_DATE_ES4CPS.pdf)\r\n* [Testing Telecoms Software with Quviq QuickCheck](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.148.6554&rep=rep1&type=pdf)\r\n\r\n### Benchmarking \r\n* [OLTP-Bench: An Extensible Testbed for Benchmarking Relational Databases](http://www.vldb.org/pvldb/vol7/p277-difallah.pdf)\r\n* [OLTP Benchmark Wiki](http://oltpbenchmark.com/wiki/index.php?title=Main_Page)\r\n* [OLTP Benchmark on Github](https://github.com/oltpbenchmark)\r\n* [Py-TPCC](https://github.com/apavlo/py-tpcc)\r\n\r\n### Linkbench \r\n* [LinkBench from Facebook](https://www.facebook.com/notes/facebook-engineering/linkbench-a-database-benchmark-for-the-social-graph/10151391496443920) and [Github.com repo](https://github.com/facebookarchive/linkbench)\r\n* [LinkBenchX from Percona](https://www.percona.com/blog/2015/05/01/linkbenchx-benchmark-based-arrival-request-rate/)\r\n\r\n### YCSB \r\n* [Yahoo! Cloud System Benchmark (YCSB)](https://github.com/brianfrankcooper/YCSB)\r\n* [YCSB+T: Benchmarking Web-scale Transactional Databases](http://www.researchgate.net/publication/269306582_YCSBT_Benchmarking_web-scale_transactional_databases)\r\n* [YCSB++](http://www.pdl.cmu.edu/ycsb++/)\r\n* [Correcting YCSB's Coordinated Omission problem](http://psy-lob-saw.blogspot.ru/2015/03/fixing-ycsb-coordinated-omission.html)\r\n\r\n### Traffic Control \r\n* [Traffic Control](http://www.funtoo.org/Traffic_Control)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}